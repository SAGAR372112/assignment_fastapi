import google.generativeai as genai # type: ignore
from typing import Dict, Any
import logging
import asyncio

logger = logging.getLogger(__name__)

class AIAnalyzer:
    "AI-powered market analysis using Google Gemini"
    def __init__(self, api_key: str):
        if not api_key:
            raise ValueError("Gemini API key is required")
        
        genai.configure(api_key=api_key)
        
        self.model = genai.GenerativeModel(model_name='gemini-1.5-flash')
    
    async def analyze_market_data(self, sector: str, market_data: Dict[str, Any]) -> str:
        "Analyze market data and generate markdown report"
        try:
            context = self._prepare_analysis_context(sector, market_data)
            prompt = self._create_analysis_prompt(sector, context)
            response = await self._generate_analysis(prompt)
            markdown_report = self._format_markdown_report(sector, response)
            
            return markdown_report
            
        except Exception as e:
            logger.error(f"AI analysis error for {sector}: {str(e)}")
            return self._generate_fallback_report(sector, market_data)
    
    def _prepare_analysis_context(self, sector: str, market_data: Dict[str, Any]) -> str:
        context_parts = []
        if market_data.get('news'):
            context_parts.append("Recent News and Developments:")
            for news in market_data['news'][:5]:  # Limit to top 5
                context_parts.append(f"- {news.get('title', 'N/A')}: {news.get('summary', 'N/A')}")

        if market_data.get('sector_info'):
            context_parts.append("\nSector Information:")
            for key, value in market_data['sector_info'].items():
                context_parts.append(f"- {key.replace('_', ' ').title()}: {value}")
        
        return "\n".join(context_parts)
    
    def _create_analysis_prompt(self, sector: str, context: str) -> str:
        "Create analysis prompt for AI"
        return f"""
        You are a market analyst. Based on the following context, analyze the Indian {sector} sector.

        Context:
        {context}

        Provide a concise report with:
        1. Market Overview
        2. Trade Opportunities (Import/Export)
        3. Investment Potential
        4. Key Risks & Government Impact
        5. Actionable Recommendations

        Focus only on:
        - Indian market context
        - Current trade and investment insights
        - Practical tips for businesses and investors

        Be specific, avoid fluff, and keep it short.
        """
    
    async def _generate_analysis(self, prompt: str) -> str:
        "Generate AI analysis using Gemini"
        try:
            # Run in executor to avoid blocking
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None, 
                lambda: self.model.generate_content(prompt)
            )
            return response.text
        except Exception as e:
            logger.error(f"Gemini API error: {str(e)}")
            raise
    
    def _format_markdown_report(self, sector: str, analysis: str) -> str:
        """Format AI analysis as structured markdown report"""
        current_date = "2024-07-22"  # Current date
        
        markdown_template = f"""
        # Trade Opportunities Analysis: {sector.title()} Sector
        **Analysis Date:** {current_date}  
        **Market Focus:** India  
        **Report Type:** Trade Opportunities Assessment
        ---
        ## Executive Summary
        {analysis}
        ---
        ## Data Sources
        - Economic Times India
        - Business Standard
        - Government Trade Portals
        - Market Research Reports
        - Real-time News Feeds
        ---
        ## Methodology
        This analysis combines:
        - Real-time market data collection
        - AI-powered trend analysis
        - Government policy tracking
        - Trade statistics evaluation
        ---
        *Disclaimer: This analysis is for informational purposes only. Please conduct additional research before making investment decisions.*
        ---
        **Generated by:** Trade Opportunities API v1.0  
        **Last Updated:** {current_date}
        """
        return markdown_template
    
    def _generate_fallback_report(self, sector: str, market_data: Dict[str, Any]) -> str:
        """Generate fallback report when AI analysis fails"""
        return f"""
        # Trade Opportunities Analysis: {sector.title()} Sector

        **Analysis Date:** 2024-07-22  
        **Status:** Preliminary Analysis  

        ## Market Overview
        The {sector} sector in India presents various trade opportunities based on current market conditions.

        ## Key Highlights
        - Active market participation
        - Government support initiatives
        - Growing domestic demand
        - Export potential identified

        ## Data Collection Status
        - News articles: {len(market_data.get('news', []))}
        - Sources analyzed: {len(market_data.get('sources', []))}

        ## Recommendations
        1. Monitor market trends closely
        2. Evaluate regulatory requirements
        3. Assess competitive landscape
        4. Consider partnership opportunities

        *Note: Detailed AI analysis temporarily unavailable. Please try again later for comprehensive insights.*
        """